'../../middlewares/authFacebook'
'../../middlewares/authGoogle'
import session from 'express-session'
import express from 'express'
const app = express();

app.use(session({
  secret: 'keyboard cat',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: true }
}))

import passport from 'passport';
import {parse, stringify, toJSON, fromJSON} from 'flatted';
import { NextFunction, Request,Response, Router } from 'express'
import { check } from 'express-validator'
import { validateFields } from '../../middlewares/validateFields';
import { validateJwt } from '../../middlewares/validateJwt';
import { login } from '../../controllers/auth'
import {
    addUser,
    deleteAllUsers,
    deleteUser,
    getUser,
    getUsers,
    googleSuccess,
    googleFailure,
    facebookSuccess,
    noAuth,
    updateDoc,
    updateUser
} from '../../controllers/userController';
import { existEmail } from '../../helpers/existEmailUser';
import { validPass } from '../../helpers/regexPass';
import { userAdmin } from '../../middlewares/validateRoles';
import { storage } from '../../middlewares/multerConfig';
import { isLoggedIn }  from '../../middlewares/isLogged';


const router: Router = Router();


/** 
 * validateJwt - Verify that a token is included in the request.  
 * validateFields - validates errors generated by express-validator
*/
/* localhost:3000/v1/users */
router.get('/users',validateJwt,userAdmin,getUsers)
router.get('/user/:id',/* validateJwt ,userAdmin,*/getUser)
router.post('/user',storage.single('img'),[
  check('email')
    .custom(existEmail),
  check('email','Email is not valid')
    .isEmail(),
  check('password')
    .custom(validPass)
    .isLength({ min: 5 })
    .withMessage('must be at least 5 chars long'),
  validateFields
],addUser)

/** ruta login */
router.post('/user/login',login)
router.put('/user/:id', storage.single('img'),updateUser)

router.delete('/user/:id',
  validateJwt,
  /* userAdmin, */
  validateFields,
  deleteUser)
router.delete('/all-users',/* validateJwt, validateFields, */deleteAllUsers)

/* Test queries findOne */
// router.get('/only-doc',validPass)
router.put('/update-doc',updateDoc)


/**
 * Facebook
 */
router.get('/auth/facebook',passport.authenticate('sign-up-facebook',{scope:['email']}));
router.get('/auth/facebook/login',
  passport.authenticate('sign-up-facebook', { failureRedirect: '/login' }),
  (req:Request, res:Response)=>{
    // res.redirect('/login-ok')
    console.log('USER IS LOGGED IN',req.isAuthenticated())
    return res.json({
      data: req.user 
    })
  });

router.get('/login',noAuth)
router.get('/login-ok',isLoggedIn, facebookSuccess) 

/**
 * Google
 */
router.get('/auth/google',passport.authenticate('sign-up-google',{scope:['email','profile']}));
router.get('/auth/google/login',passport.authenticate('sign-up-google',{failureRedirect:'/auth/google/failure'}),
(req:Request,res:Response)=>{
  return res.json({
    data: req.user 
  })
})

router.get('/auth/google/success',isLoggedIn, googleSuccess);
router.get('/auth/google/failure',googleFailure);


/** 
 * Logout facebook and google
 */
router.get('/logout',(req:Request,res:Response,next:NextFunction)=>{
  req.session.destroy((err) => {
    if (err) { return next(err); }
    // res.redirect("/");
    res.redirect('https://accounts.google.com/logout')
  });
})

/**
 * No logged In
 */
router.get('/',(req,res)=>{
  res.send('You are not logged in');
})




export default router;


