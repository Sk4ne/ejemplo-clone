"use strict";
'../../middlewares/authFacebook';
'../../middlewares/authGoogle';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const passport_1 = __importDefault(require("passport"));
const express_validator_1 = require("express-validator");
const isLogged_1 = require("../../middlewares/isLogged");
const validateFields_1 = require("../../middlewares/validateFields");
const validateJwt_1 = require("../../middlewares/validateJwt");
const auth_1 = require("../../controllers/auth");
const existEmailUser_1 = require("../../helpers/existEmailUser");
const regexPass_1 = require("../../helpers/regexPass");
const validateRoles_1 = require("../../middlewares/validateRoles");
const multerConfig_1 = require("../../middlewares/multerConfig");
const userController_1 = require("../../controllers/userController");
const restorePass_1 = require("../../helpers/restorePass");
const validId_1 = require("../../helpers/validId");
const router = (0, express_1.Router)();
/**
 * validateJwt - Verify that a token is included in the request.
 * validateFields - validates errors generated by express-validator
 */
// OBTENER TODOS LOS USUARIOS
router.get('/users', validateJwt_1.validateJwt, validateRoles_1.userAdmin, userController_1.getUsers);
// OBTENER UN USUARIO POR ID
router.get('/user/:id', [
    (0, express_validator_1.check)('id', 'Is not a valid ID').isMongoId(),
    (0, express_validator_1.check)('id').custom(validId_1.existMongoIdUser),
    validateFields_1.validateFields
], userController_1.getUser);
// CREAR UN USUARIO
router.post('/user', multerConfig_1.storage.single('img'), [
    (0, express_validator_1.check)('email')
        .custom(existEmailUser_1.existEmail),
    (0, express_validator_1.check)('email', 'Email is not valid')
        .isEmail(),
    (0, express_validator_1.check)('password')
        .custom(regexPass_1.validPass)
        .isLength({ min: 5 })
        .withMessage('must be at least 5 chars long'),
    validateFields_1.validateFields
], userController_1.addUser);
/** ruta login */
router.post('/user/login', auth_1.login);
/* ACTUALIZAR UN USUARIO */
router.put('/user/:id', multerConfig_1.storage.single('img'), [
    (0, express_validator_1.check)('id', 'Is not a valid ID').isMongoId(),
    (0, express_validator_1.check)('id').custom(validId_1.existMongoIdUser),
    validateFields_1.validateFields
], userController_1.updateUser);
/** This route is use to send one link to email user to restore password */
router.post('/restore-password', restorePass_1.restorePassword);
/** This route is use to add new password */
router.post('/password-reset/:idUser', [
    (0, express_validator_1.check)('idUser', 'Is not a valid ID').isMongoId(),
    validateFields_1.validateFields
], restorePass_1.changePassword);
// ELIMINAR UN USUARIO
router.delete('/user/:id', [
    (0, express_validator_1.check)('id', 'Is not a valid ID').isMongoId(),
    (0, express_validator_1.check)('id').custom(validId_1.existMongoIdUser),
    validateFields_1.validateFields
], userController_1.deleteUser);
/* ESTA RUTA ES DE PRUEBA - POR LO TANTO NO SE VA A DOCUMENTAR */
router.delete('/all-users', /* validateJwt, validateFields, */ userController_1.deleteAllUsers);
/* ESTA RUTA ES DE PRUEBA - SIRVE PARA ACTUALIZAR EL ROL DE TODOS LOS USUARIO */
router.put('/update-doc', userController_1.updateDoc);
/** Facebook */
router.get('/auth/facebook', passport_1.default.authenticate('sign-up-facebook', { scope: ['email'] }));
router.get('/auth/facebook/login', passport_1.default.authenticate('sign-up-facebook', { failureRedirect: '/v1/login' }), (req, res) => {
    res.redirect('/v1/facebook-ok');
});
router.get('/login', userController_1.noAuth);
router.get('/facebook-ok', isLogged_1.isLoggedIn, userController_1.facebookSuccess);
/** google  */
router.get('/auth/google', passport_1.default.authenticate('sign-up-google', { scope: ['email', 'profile'] }));
router.get('/auth/google/login', passport_1.default.authenticate('sign-up-google', { failureRedirect: '/v1/auth/google/failure' }), (req, res) => {
    res.redirect('/v1/google-ok');
});
router.get('/google-ok', isLogged_1.isLoggedIn, userController_1.googleSuccess);
router.get('/auth/google/failure', userController_1.googleFailure);
/** logout google */
router.get('/logout/google', userController_1.logoutGoogle);
/** logout facebook */
router.get('/logout/facebook', userController_1.logoutFacebook);
/** No loggedIn google & facebook*/
router.get('/home', (req, res) => {
    res.send('You are not logged in');
});
exports.default = router;
